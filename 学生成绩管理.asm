DATA SEGMENT
STUDENT STRUC
NAME db 11 dup (?);10个字符+‘$’
CLASS db 11 dup (?);10个字符+‘$’
NUMBER db 4 dup (?);4位数字
GRADE db 4 dup (?);4位数字
STUDENT ENDS
STUDENT_TYPE EQU 30
NAME_SIZE EQU 11
CLASS_SIZE EQU 11
NUMBER_SIZE EQU 4
GRADE_SIZE EQU 4
STUDENT_ARRAY STUDENT 60 dup (<>)
ARRAY_COUNT dw 0;数组中已存元素个数
SWAP_S1 dw ?
SWAP_S2 dw ?
SWAP_SIZE dw ?
GRADE_TEMP db 5 dup (?);保存输入的分数，用于测试输入格式是否正确，若正确则按权值存入STUDENT.GRADE
TMP dw ?
COUNT_00_60 dw 00H
COUNT_60_70 dw 00H
COUNT_70_80 dw 00H
COUNT_80_90 dw 00H
COUNT_90_100 dw 00H
MENU1 db '***************************************************', 0AH, 0DH, '$'
MENU2 db '*        The Student Grade Management             *', 0AH, 0DH, '$'
MENU3 db '*     (1) Input student information               *', 0AH, 0DH, '$'
MENU4 db '*     (2) Sort(number)                            *', 0AH, 0DH, '$'
MENU5 db '*     (3) Sort(grade)                             *', 0AH, 0DH, '$'
MENU6 db '*     (4) Calculate the average score             *', 0AH, 0DH, '$'
MENU7 db '*     (5) Count                                   *', 0AH, 0DH, '$'
MENU8 db '*     (6) Exit                                    *', 0AH, 0DH, '$'
MENU9 db '***************************************************', 0AH, 0DH, '$'
MENU10 db ' please entry the chose(1/2/3/4/5/6):$'
ERROR1 db 0AH, 0DH,' the input must be 1~6, please entry the chose again:$'
ERROR2 db 0AH, 0DH,'ERROR: the input must be integer',0AH, 0DH, '$'
ERROR3 db 0AH, 0DH,'ERROR: please input again$'
NAME_STR db 'Name: $'
CLASS_STR db 'Class: $'
NUMBER_STR db 'Number: $'
GRADE_STR db 'Grade: $'

TIP1 db 'Please input the student information', 0AH, 0DH, '$'
TIP2 db 'Sort for number', 0AH, 0DH, '$'
TIP3 db 'Sort for grade', 0AH, 0DH, '$'
TIP4 db 'the average score', 0AH, 0DH, '$'
TIP5 db 'please input "r" to return or "c" to continue: $'
TIP6 db 'please input "r" to return: $'
TIP7 db 'The result of number sort: $'
TIP8 db 'The result of grade sort: $'
TIP9 db 'The average score is:', 0AH, 0DH, '$'
TIP10 db 'The result of counting:', 0AH, 0DH, '$'
COUNT1 db '00 ~ 59: $'
COUNT2 db '60 ~ 69: $'
COUNT3 db '70 ~ 79: $'
COUNT4 db '80 ~ 89: $'
COUNT5 db '90 ~ 100: $'
NEWLINE db 0AH, 0DH, '$'


DATA ENDS
;***********************
SHOW MACRO STR;输出字符串
	PUSH DX
	PUSH AX
	LEA DX, STR
    MOV AH, 09H
    INT 21H
    POP AX
    POP DX
ENDM  

ALL_PUSH MACRO
	PUSH AX
	PUSH BX
	PUSH CX
	PUSH DX
	PUSH SP
	PUSH BP
	PUSH DI
	PUSH SI
ENDM

ALL_POP MACRO 
	POP SI
	POP DI
	POP BP
	POP SP
	POP DX
	POP CX
	POP BX
	POP AX
ENDM

;**************************

STACK SEGMENT STACK
	DW 100 dup (?)
STACK ENDS

CODE SEGMENT
    ASSUME CS:CODE, DS:DATA, SS:STACK


;*****************
SET_CURSPR PROC ;光标设置到每页开头(0,0)位置
	ALL_PUSH
	MOV AH, 02H
	MOV BH, 0;页号设置
	MOV DH, 0;行号
	MOV DL, 0;列号
	INT 10H
	ALL_POP
	RET
SET_CURSPR ENDP

CLEAR PROC;清屏
	ALL_PUSH
    MOV AH, 6
 	MOV AL, 0
    MOV CX, 0;左上角(0,0)
    MOV DX, 184FH;右下角(18,4f)
    MOV BH, 14;空白行属性
    INT 10H
    CALL SET_CURSPR
    ALL_POP
    RET
CLEAR ENDP

MENU PROC;展示菜单选项
   	SHOW MENU1
   	SHOW MENU2
   	SHOW MENU3
   	SHOW MENU4
   	SHOW MENU5
   	SHOW MENU6
   	SHOW MENU7
   	SHOW MENU8
   	SHOW MENU9
   	SHOW MENU10	
   	RET
MENU ENDP

STR_TO_VAL PROC	
	ALL_PUSH
	
	MOV SI, TMP
	MOV AL, [SI]
	AND AH, 00H
	MOV BX, 1000
	MUL BX
	MOV DX, AX
	INC SI
	MOV AL, [SI]
	MOV BL, 100
	MUL BL
	ADD DX, AX
	INC SI
	MOV AL, [SI]
	MOV BL, 10
	MUL BL
	ADD DX, AX
	INC SI
	MOV AL, [SI]
	AND AH, 00H
	ADD DX, AX
	MOV WORD PTR TMP, DX
	ALL_POP
	RET
STR_TO_VAL ENDP

SWAP_BYTE PROC
	ALL_PUSH
	
	MOV CX, SWAP_SIZE
	MOV BX, SWAP_S1
	MOV BP, SWAP_S2
SWAP_BYTE_LOOP1:
	MOV AL, [BX]
	XCHG AL, DS:[BP]
	MOV BYTE PTR [BX], AL
	INC BX
	INC BP
	LOOP SWAP_BYTE_LOOP1

	ALL_POP
	RET
SWAP_BYTE ENDP

;**************************读取学生信息***********************
INPUT_STU PROC 
	ALL_PUSH

INPUT3:	
	CALL CLEAR
	
	MOV AX, ARRAY_COUNT
	
	MOV DX, STUDENT_TYPE
	
	MUL DX
	MOV BX, AX; BX存数组下标
	
	
	SHOW TIP1										;读取NAME
	SHOW NAME_STR
	MOV SI, 0;NAME下标
INPUT_NAME2:
	MOV AH, 01H
	INT 21H
	CMP AL, 0DH
	JZ INPUT_NAME1 
	MOV BYTE PTR STUDENT_ARRAY[BX].NAME[SI], AL
	INC SI
	CMP SI, 10
	JZ INPUT_NAME3
	JMP INPUT_NAME2
INPUT_NAME3:	
	SHOW NEWLINE
INPUT_NAME1:
	MOV BYTE PTR STUDENT_ARRAY[BX].NAME[SI], '$'
	;SHOW STUDENT_ARRAY[BX].NAME
	
	SHOW CLASS_STR									;读取CLASS
	MOV SI, 0;CLASS下标
INPUT_CLASS2:
	MOV AH, 01H
	INT 21H
	CMP AL, 0DH
	JZ INPUT_CLASS1 
	MOV BYTE PTR STUDENT_ARRAY[BX].CLASS[SI], AL
	INC SI
	CMP SI, 10
	JZ INPUT_CLASS3 
	JMP INPUT_CLASS2
INPUT_CLASS3:
	SHOW NEWLINE
INPUT_CLASS1:
	MOV BYTE PTR STUDENT_ARRAY[BX].CLASS[SI], '$'
	;SHOW STUDENT_ARRAY[BX].CLASS

INPUT_NUMBER1:	
	SHOW NUMBER_STR									;读取NUMBER
	MOV SI, 0;NUMBER下标
INPUT_NUMBER2:
	MOV AH, 01H
	INT 21H
	CMP AL, 0DH
	JZ INPUT_NUMBER1 
	SUB AL, 30H
	MOV BYTE PTR STUDENT_ARRAY[BX].NUMBER[SI], AL
	INC SI
	CMP SI, 4
	JZ INPUT_NUMBER3 
	JMP INPUT_NUMBER2
INPUT_NUMBER3:
	SHOW NEWLINE
	

INPUT_GRADE6:	
	SHOW GRADE_STR									;读取GRADE
	MOV SI, 0;GRADE_TEMP下标
	MOV CX, 0;CX初始化
INPUT_GRADE2:
	MOV AH, 01H
	INT 21H
	CMP AL, '.'					;是否为小数点
	JNZ INPUT_GRADE7
	MOV CX, SI;CX记录小数点位置
	JMP INPUT_GRADE2
INPUT_GRADE7:
	CMP AL, 0DH
	JZ INPUT_GRADE1					
	CMP AL, '0'					;是否小于0
	JL INPUT_GRADE5
	CMP AL, '9'					;是否大于9
	JG INPUT_GRADE5 	
INPUT_GRADE4:
	SUB AL, 30H
	MOV BYTE PTR GRADE_TEMP[SI], AL
	INC SI
	CMP SI, 4
	JZ INPUT_GRADE3 
	JMP INPUT_GRADE2
	
INPUT_GRADE5:
	SHOW ERROR2
	JMP INPUT_GRADE6
INPUT_GRADE3:
	SHOW NEWLINE
INPUT_GRADE1:

	

	CMP CX, 1
	JNZ INPUT_GRADE8
	MOV SI, 0
	MOV BYTE PTR STUDENT_ARRAY[BX].GRADE[SI], 0
	INC SI
	MOV BYTE PTR STUDENT_ARRAY[BX].GRADE[SI], 0
	INC SI
	MOV DL, GRADE_TEMP[SI-2]
	MOV BYTE PTR STUDENT_ARRAY[BX].GRADE[SI], DL
	INC SI
	MOV DL, GRADE_TEMP[SI-2]
	MOV BYTE PTR STUDENT_ARRAY[BX].GRADE[SI], DL
	
INPUT_GRADE8:	
	CMP CX, 2
	JNZ INPUT_GRADE9
	MOV SI, 0
	MOV BYTE PTR STUDENT_ARRAY[BX].GRADE[SI], 0
	INC SI
	MOV DL, GRADE_TEMP[SI-1]
	MOV BYTE PTR STUDENT_ARRAY[BX].GRADE[SI], DL
	INC SI
	MOV DL, GRADE_TEMP[SI-1]
	MOV BYTE PTR STUDENT_ARRAY[BX].GRADE[SI], DL
	INC SI
	MOV DL, GRADE_TEMP[SI-1]
	MOV BYTE PTR STUDENT_ARRAY[BX].GRADE[SI], DL
	
INPUT_GRADE9:	
	CMP CX, 3
	JNZ INPUT_GRADE10
	MOV SI, 0
	MOV DL, GRADE_TEMP[SI]
	MOV BYTE PTR STUDENT_ARRAY[BX].GRADE[SI], DL
	INC SI
	MOV DL, GRADE_TEMP[SI]
	MOV BYTE PTR STUDENT_ARRAY[BX].GRADE[SI], DL
	INC SI
	MOV DL, GRADE_TEMP[SI]
	MOV BYTE PTR STUDENT_ARRAY[BX].GRADE[SI], DL
	INC SI
	MOV DL, GRADE_TEMP[SI]
	MOV BYTE PTR STUDENT_ARRAY[BX].GRADE[SI], DL

INPUT_GRADE10:	


	;INC SI
	;MOV BYTE PTR STUDENT_ARRAY[BX].GRADE[SI], '$'
	;SHOW STUDENT_ARRAY[BX].GRADE
	MOV AX, ARRAY_COUNT
	INC AX
	
	MOV WORD PTR [ARRAY_COUNT], AX
	
INPUT4:
	SHOW NEWLINE
	SHOW TIP5
	MOV AH, 01H
	INT 21H
	
	CMP AL, 'r'
	JNZ INPUT1
	JMP INPUT_END
INPUT1:	
	CMP AL, 'c'
	JNZ INPUT2
	SHOW NEWLINE
	SHOW NEWLINE
	JMP INPUT3
INPUT2:	
	SHOW ERROR3
	SHOW NEWLINE
	JMP INPUT4

INPUT_END:
	
	ALL_POP

	RET
INPUT_STU ENDP
;********************************************************


;*********************按学号排序*************************
SORT_NUMBER PROC
	ALL_PUSH
	
	MOV DX, ARRAY_COUNT
	CMP DX, 0
	JZ  SORT_NUMBER_END
	CMP DX, 1
	JZ  SORT_NUMBER_END
	DEC DX
	MOV CX, DX;外层循环数组个数减1
	

SORT_NUMBER_LOOP1:
	MOV DI, CX;DI保存外层循环次数
	
	MOV BX, 0
SORT_NUMBER_LOOP2:
	LEA DX, STUDENT_ARRAY[BX].NUMBER;TMP传参
	MOV WORD PTR TMP, DX
	CALL STR_TO_VAL ;返回值在TMP
	MOV AX, TMP
	
	LEA DX, STUDENT_ARRAY[BX+STUDENT_TYPE].NUMBER;TMP传参
	MOV WORD PTR TMP, DX
	CALL STR_TO_VAL ;返回值在TMP
	
	CMP AX, TMP
	JLE SORT_NUMBER_CONT1
	
	;交换
	LEA AX, STUDENT_ARRAY[BX]
	MOV WORD PTR SWAP_S1, AX
	LEA AX, STUDENT_ARRAY[BX+STUDENT_TYPE]
	MOV WORD PTR SWAP_S2, AX
	MOV WORD PTR SWAP_SIZE, STUDENT_TYPE
	CALL SWAP_BYTE

SORT_NUMBER_CONT1:
	ADD BX, STUDENT_TYPE;下一个学生下标
	LOOP SORT_NUMBER_LOOP2
	MOV CX, DI
	LOOP SORT_NUMBER_LOOP1

SORT_NUMBER_END:
	
	CALL CLEAR
	SHOW TIP7
	SHOW NEWLINE
	CALL OUTPUT_ALL_STU
	
SORT_NUMBER_L1:	
	SHOW NEWLINE
	SHOW TIP6
	MOV AH, 01H
	INT 21H
	
	CMP AL, 'r'
	JZ SORT_NUMBER_L2

	SHOW ERROR3
	SHOW NEWLINE
	JMP SORT_NUMBER_L1
	
SORT_NUMBER_L2:	
	
	ALL_POP
	RET
SORT_NUMBER ENDP

;********************************************************

;*********************按分数排序*************************
SORT_GRADE PROC
	ALL_PUSH
	
	MOV DX, ARRAY_COUNT
	CMP DX, 0
	JZ  SORT_GRADE_END
	CMP DX, 1
	JZ  SORT_GRADE_END
	DEC DX
	MOV CX, DX;外层循环数组个数减1
	

SORT_GRADE_LOOP1:
	MOV DI, CX;DI保存外层循环次数
	
	MOV BX, 0
SORT_GRADE_LOOP2:
	LEA DX, STUDENT_ARRAY[BX].GRADE;TMP传参
	MOV WORD PTR TMP, DX
	CALL STR_TO_VAL ;返回值在TMP
	MOV AX, TMP
	
	LEA DX, STUDENT_ARRAY[BX+STUDENT_TYPE].GRADE;TMP传参
	MOV WORD PTR TMP, DX
	CALL STR_TO_VAL ;返回值在TMP
	
	CMP AX, TMP
	JLE SORT_GRADE_CONT1
	
	;交换
	LEA AX, STUDENT_ARRAY[BX]
	MOV WORD PTR SWAP_S1, AX
	LEA AX, STUDENT_ARRAY[BX+STUDENT_TYPE]
	MOV WORD PTR SWAP_S2, AX
	MOV WORD PTR SWAP_SIZE, STUDENT_TYPE
	CALL SWAP_BYTE

SORT_GRADE_CONT1:
	ADD BX, STUDENT_TYPE;下一个学生下标
	LOOP SORT_GRADE_LOOP2
	MOV CX, DI
	LOOP SORT_GRADE_LOOP1

SORT_GRADE_END:
	
	CALL CLEAR
	SHOW TIP8
	SHOW NEWLINE
	CALL OUTPUT_ALL_STU
	
SORT_GRADE_L1:	
	SHOW NEWLINE
	SHOW TIP6
	MOV AH, 01H
	INT 21H
	
	CMP AL, 'r'
	JZ SORT_GRADE_L2

	SHOW ERROR3
	SHOW NEWLINE
	JMP SORT_GRADE_L1
	
SORT_GRADE_L2:	
	
	ALL_POP
	RET
SORT_GRADE ENDP

;********************************************************

;**********************输出所有学生信息************************
OUTPUT_ALL_STU PROC 
	ALL_PUSH
	
	MOV CX, ARRAY_COUNT
	CMP CX, 0
	JZ OUTPUT_ALL_STU_END1
	MOV BX, 0
OUTPUT_ALL_STU_LOOP1:
	SHOW NAME_STR
	SHOW STUDENT_ARRAY[BX].NAME
	SHOW NEWLINE
	
	SHOW CLASS_STR
	SHOW STUDENT_ARRAY[BX].CLASS
	SHOW NEWLINE
	
	SHOW NUMBER_STR
	
	MOV SI, 0
OUTPUT_ALL_L2:	
	MOV AH, 02H
	MOV DL, BYTE PTR STUDENT_ARRAY[BX].NUMBER[SI]
	ADD DL, 30H
	INT 21H
	INC SI
	CMP SI, 4
	JZ OUTPUT_ALL_L1
	JMP OUTPUT_ALL_L2
OUTPUT_ALL_L1:
	SHOW NEWLINE
	
	JMP OUTPUT_ALL_L6
	
OUTPUT_ALL_STU_END1:
	JMP OUTPUT_ALL_STU_END2
OUTPUT_ALL_STU_LOOPTMP:
	JMP OUTPUT_ALL_STU_LOOP1
	
OUTPUT_ALL_L6:	
	SHOW GRADE_STR
	
	MOV SI, 0
OUTPUT_ALL_L4:	
	MOV AH,02H
	MOV DL, BYTE PTR STUDENT_ARRAY[BX].GRADE[SI]
	ADD DL, 30H
	INT 21H	
	INC SI
	CMP SI, 3
	JZ OUTPUT_ALL_L5
	CMP SI, 4
	JZ OUTPUT_ALL_L3
	JMP OUTPUT_ALL_L4
OUTPUT_ALL_L5:	
	MOV AH,02H
	MOV DL, '.'
	INT 21H
	JMP OUTPUT_ALL_L4
OUTPUT_ALL_L3:
	SHOW NEWLINE
	SHOW NEWLINE
	
	ADD BX, STUDENT_TYPE
	LOOP OUTPUT_ALL_STU_LOOPTMP

OUTPUT_ALL_STU_END2:
		
	ALL_POP
	RET
OUTPUT_ALL_STU ENDP

;********************************************************


;**********************统计平均分************************
AVERAGE_SCORE PROC 
	ALL_PUSH
	
	CALL CLEAR
	SHOW TIP9
	MOV CX, ARRAY_COUNT
	CMP CX, 0
	JZ AVERAGE_SCORE_L1
	MOV BX, 0
	MOV AX, 0;总和
	
AVERAGE_SCORE_LOOP1:	
	LEA DX, STUDENT_ARRAY[BX].GRADE;DX传参
	MOV WORD PTR TMP, DX
	CALL STR_TO_VAL ;返回值在DX
	ADD AX, TMP
	ADD BX, STUDENT_TYPE
	LOOP AVERAGE_SCORE_LOOP1
	
	MOV DX, 0
	MOV BX, ARRAY_COUNT
	DIV BX;商在AX

	MOV DX, 0
	MOV BX, 1000
	DIV BX
	PUSH DX;余数
	PUSH AX;商
	MOV AH, 02H
	POP DX;商
	ADD DX, 30H
	INT 21H
	
	MOV DX, 0
	POP AX;余数
	MOV BX, 100
	DIV BX
	PUSH DX;余数
	PUSH AX;商
	MOV AH, 02H
	POP DX;商
	ADD DX, 30H
	INT 21H
	
	MOV DX, 0
	POP AX;余数
	MOV BX, 10
	DIV BX
	PUSH DX;余数
	PUSH AX;商
	MOV AH, 02H
	POP DX;商
	ADD DX, 30H
	INT 21H
	
	MOV DL, '.'
	MOV AH, 02H
	INT 21H
	
	POP DX
	ADD DX, 30H
	MOV AH, 02H
	INT 21H

	
AVERAGE_SCORE_L1:	
	SHOW NEWLINE
	SHOW TIP6
	MOV AH, 01H
	INT 21H
	
	CMP AL, 'r'
	JZ AVERAGE_SCORE_L2

	SHOW ERROR3
	SHOW NEWLINE
	JMP AVERAGE_SCORE_L1
	
AVERAGE_SCORE_L2:
	
	ALL_POP
	RET
AVERAGE_SCORE ENDP

;********************************************************

;**********************统计分数段************************
COUNT PROC 
	ALL_PUSH
	
	MOV WORD PTR COUNT_00_60, 0;初始化
	MOV WORD PTR COUNT_60_70, 0
	MOV WORD PTR COUNT_70_80, 0
	MOV WORD PTR COUNT_80_90, 0
	MOV WORD PTR COUNT_90_100, 0
	
	CALL CLEAR
	SHOW TIP10
	MOV CX, ARRAY_COUNT
	CMP CX, 0
	JZ COUNT_L1
	MOV BX, 0
	
COUNT_LOOP1:	
	LEA DX, STUDENT_ARRAY[BX].GRADE;DX传参
	MOV WORD PTR TMP, DX
	CALL STR_TO_VAL ;返回值在DX
	
	CMP TMP, 600
	JGE COUNT_60
	MOV DX, COUNT_00_60
	INC DX
	MOV WORD PTR COUNT_00_60, DX	
	JMP COUNT_L3
COUNT_60:	
	CMP TMP, 700
	JGE COUNT_70
	MOV DX, COUNT_60_70
	INC DX
	MOV WORD PTR COUNT_60_70, DX	
	JMP COUNT_L3	
COUNT_70:	
	CMP TMP, 800
	JGE COUNT_80
	MOV DX, COUNT_70_80
	INC DX
	MOV WORD PTR COUNT_70_80, DX	
	JMP COUNT_L3	
COUNT_80:
	CMP TMP, 900
	JGE COUNT_90
	MOV DX, COUNT_80_90
	INC DX
	MOV WORD PTR COUNT_80_90, DX	
	JMP COUNT_L3
COUNT_90:
	MOV DX, COUNT_90_100
	INC DX
	MOV WORD PTR COUNT_90_100, DX	
	JMP COUNT_L3
COUNT_L3:	
	ADD BX, STUDENT_TYPE
	LOOP COUNT_LOOP1
		
	
COUNT_L1:		
	MOV AH, 02H
	SHOW COUNT1
	MOV DX, COUNT_00_60
	ADD DX, 30H
	INT 21H
	SHOW NEWLINE
	
	SHOW COUNT2
	MOV DX, COUNT_60_70
	ADD DX, 30H
	INT 21H
	SHOW NEWLINE
	
	SHOW COUNT3
	MOV DX, COUNT_70_80
	ADD DX, 30H
	INT 21H
	SHOW NEWLINE
	
	SHOW COUNT4
	MOV DX, COUNT_80_90
	ADD DX, 30H
	INT 21H
	SHOW NEWLINE
	
	SHOW COUNT5
	MOV DX, COUNT_90_100
	ADD DX, 30H
	INT 21H
	SHOW NEWLINE
	
	SHOW NEWLINE
	SHOW TIP6
	MOV AH, 01H
	INT 21H
	
	CMP AL, 'r'
	JZ COUNT_L2

	SHOW ERROR3
	SHOW NEWLINE
	JMP COUNT_L1
	
COUNT_L2:
	
	ALL_POP
	RET
COUNT ENDP

;********************************************************
	
START:
	MOV AX, DATA
    MOV DS, AX   
L1: 
	CALL CLEAR  
	CALL MENU
L3:
	MOV AH, 01H
    INT 21H
  	
 	CMP AL,'1';判断
    JNZ SELECT2
    CALL INPUT_STU
    JMP L1   
SELECT2:
	CMP AL,'2'
	JNZ SELECT3 
	CALL SORT_NUMBER
	JMP L1
SELECT3:
	CMP AL,'3'
	JNZ SELECT4
	CALL SORT_GRADE
	JMP L1
SELECT4:
	CMP AL,'4'
	JNZ SELECT5
	CALL AVERAGE_SCORE
	JMP L1
SELECT5:
	CMP AL,'5'
	JNE SELECT6
	CALL COUNT
	JMP L1
SELECT6:
	CMP AL,'6'
	JNZ L2
	JMP END_SELECT

L2: 
	SHOW ERROR1
	JMP L3

END_SELECT:
    MOV AH, 4CH
    INT 21H
CODE ENDS
    END START
